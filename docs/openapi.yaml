openapi: 3.0.0
info:
  title: Sync API
  description: Conflict de-escalation app with Couple and Solo session modes
  version: 1.0.0
  contact:
    name: Sync Team
    email: support@sync.app
servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api-staging.sync.app
    description: Staging server (Basic Auth required)
  - url: https://api.sync.app
    description: Production server

security:
  - bearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time

  /health/crypto:
    get:
      tags:
        - Health
      summary: Crypto health check
      description: Check encryption system health
      security: []
      responses:
        '200':
          description: Crypto system is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  kms:
                    type: string
                    example: "ok"
                  dek_age_days:
                    type: number
                    example: 7
                  selftest:
                    type: string
                    example: "ok"

  /auth/request-code:
    post:
      tags:
        - Authentication
      summary: Request verification code
      description: Send a verification code to the user's email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestCode'
      responses:
        '204':
          description: Verification code sent successfully
        '400':
          description: Invalid email format
        '429':
          description: Rate limit exceeded

  /auth/verify-code:
    post:
      tags:
        - Authentication
      summary: Verify code and get access token
      description: Verify the code and receive an access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthVerifyCode'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid code or email
        '401':
          description: Invalid or expired code

  /sessions:
    post:
      tags:
        - Sessions
      summary: Create a new session
      description: Start a new session with specified mode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionResponse'
        '401':
          description: Unauthorized
        '400':
          description: Invalid mode or request

  /sessions/{id}/messages:
    post:
      tags:
        - Messages
      summary: Send a message
      description: Send a message in a session with turn-taking enforcement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
      responses:
        '202':
          description: Message accepted for processing
        '400':
          description: Invalid message content
        '401':
          description: Unauthorized
        '409':
          description: Session locked (boundary or turn violation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Messages
      summary: Get messages with long-polling
      description: Get messages from a session with long-polling support
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: after
          in: query
          schema:
            type: string
            format: date-time
          description: Get messages after this timestamp
        - name: waitMs
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 25000
            default: 0
          description: Long-polling wait time in milliseconds
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessagesResponse'
        '401':
          description: Unauthorized
        '404':
          description: Session not found

  /sessions/{id}/end:
    post:
      tags:
        - Sessions
      summary: End a session
      description: End the current session
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session ended successfully
        '401':
          description: Unauthorized
        '404':
          description: Session not found

  /sessions/{id}/feedback:
    post:
      tags:
        - Feedback
      summary: Submit session feedback
      description: Submit feedback for a session
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedback'
      responses:
        '204':
          description: Feedback submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Session not found

  /sessions/{id}:
    delete:
      tags:
        - Sessions
      summary: Delete a session
      description: Permanently delete a session and all its data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Session not found

  /sessions/{id}/convert-to-couple:
    post:
      tags:
        - Sessions
      summary: Convert solo session to couple session
      description: Convert a solo session to a couple session with explicit consent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertToCoupleRequest'
      responses:
        '201':
          description: Session converted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertToCoupleResponse'
        '400':
          description: Invalid conversion request
        '401':
          description: Unauthorized
        '404':
          description: Session not found
        '409':
          description: Session cannot be converted

  /boundary/resources:
    get:
      tags:
        - Resources
      summary: Get boundary resources
      description: Get EU-only resources for boundary detection
      security: []
      responses:
        '200':
          description: Boundary resources retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoundaryResources'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequestCode:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    AuthVerifyCode:
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        code:
          type: string
          minLength: 6
          maxLength: 6
          example: "123456"

    AuthResponse:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    CreateSessionRequest:
      type: object
      required:
        - mode
      properties:
        mode:
          type: string
          enum: [couple, solo]
          example: "couple"
        coupleId:
          type: string
          format: uuid
          description: Required for couple mode
          example: "123e4567-e89b-12d3-a456-426614174000"

    CreateSessionResponse:
      type: object
      required:
        - sessionId
        - mode
        - turnState
      properties:
        sessionId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        mode:
          type: string
          enum: [couple, solo]
          example: "couple"
        turnState:
          type: string
          enum: [awaitingA, awaitingB, ai_reflect, boundary]
          example: "awaitingA"

    CreateMessage:
      type: object
      required:
        - sender
        - content
        - clientMessageId
      properties:
        sender:
          type: string
          enum: [userA, userB]
          example: "userA"
        content:
          type: string
          maxLength: 4000
          example: "I feel like we need to talk about our communication"
        clientMessageId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    Message:
      type: object
      required:
        - id
        - sessionId
        - sender
        - content
        - createdAt
        - safetyTags
        - clientMessageId
      properties:
        id:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        sender:
          type: string
          enum: [userA, userB, ai]
        content:
          type: string
          description: Decrypted message content
        createdAt:
          type: string
          format: date-time
        safetyTags:
          type: array
          items:
            type: string
        clientMessageId:
          type: string
          format: uuid

    GetMessagesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Message'

    CreateFeedback:
      type: object
      required:
        - rating
      properties:
        rating:
          type: string
          enum: [angry, neutral, happy]
          example: "happy"

    ConvertToCoupleRequest:
      type: object
      required:
        - consent
        - redactedSummary
      properties:
        consent:
          type: boolean
          example: true
        redactedSummary:
          type: string
          maxLength: 2000
          example: "We discussed communication issues and want to work together on this"

    ConvertToCoupleResponse:
      type: object
      required:
        - newCoupleSessionId
      properties:
        newCoupleSessionId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    BoundaryResources:
      type: object
      required:
        - region
        - resources
      properties:
        region:
          type: string
          enum: [EU]
          example: "EU"
        resources:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Crisis Helpline EU"
              phone:
                type: string
                example: "+800-123-4567"
              website:
                type: string
                example: "https://crisis-helpline.eu"

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "TURN_LOCKED"
        message:
          type: string
          example: "It's not your turn to speak"
        code:
          type: string
          example: "TURN_VIOLATION"