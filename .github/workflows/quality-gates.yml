name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

jobs:
  # Code Quality Gates
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd services/api && npm ci
          cd ../ai && npm ci
          cd ../../website && npm ci

      - name: TypeScript compilation check
        run: |
          cd services/api && npm run build
          cd ../ai && npm run build
          cd ../../website && npm run build

      - name: ESLint check
        run: |
          npm run lint:check
          cd services/api && npm run lint:check
          cd ../ai && npm run lint:check
          cd ../../website && npm run lint:check

      - name: Prettier check
        run: |
          npm run format:check
          cd services/api && npm run format:check
          cd ../ai && npm run format:check
          cd ../../website && npm run format:check

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd services/api && npm audit --audit-level=moderate
          cd ../ai && npm audit --audit-level=moderate
          cd ../../website && npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Test Suite Execution
  test-suite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, performance, security, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd services/api && npm ci
          cd ../ai && npm ci
          cd ../../website && npm ci

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit
          cd services/api && npm run test:unit
          cd ../ai && npm run test:unit
          cd ../../website && npm run test:unit

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          npm run test:integration
          cd services/api && npm run test:integration

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        run: npm run test:performance

      - name: Run security tests
        if: matrix.test-type == 'security'
        run: npm run test:security

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test server
        run: |
          cd services/api && npm run build
          node dist/m4-safety-privacy-server.js &
          sleep 5

      - name: Run load tests
        run: |
          npm run test:load
          npm run test:stress

      - name: Generate performance report
        run: npm run test:performance:report

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/

  # Accessibility Testing
  accessibility-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd website && npm ci

      - name: Build website
        run: |
          cd website && npm run build

      - name: Start website
        run: |
          cd website && npm start &
          sleep 10

      - name: Run accessibility tests
        run: |
          cd website && npm run test:accessibility

  # API Contract Testing
  api-contract-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start API server
        run: |
          cd services/api && npm run build
          node dist/m4-safety-privacy-server.js &
          sleep 5

      - name: Run API contract tests
        run: npm run test:api-contract

      - name: Validate OpenAPI spec
        run: npm run test:openapi

  # Quality Metrics
  quality-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run code coverage
        run: |
          npm run test:coverage
          cd services/api && npm run test:coverage
          cd ../ai && npm run test:coverage
          cd ../../website && npm run test:coverage

      - name: Generate coverage report
        run: npm run coverage:report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Run complexity analysis
        run: npm run complexity:analyze

      - name: Run maintainability analysis
        run: npm run maintainability:analyze

  # Deployment Readiness
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test-suite, performance-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all services
        run: |
          cd services/api && npm run build
          cd ../ai && npm run build
          cd ../../website && npm run build

      - name: Run deployment tests
        run: npm run test:deployment

      - name: Validate environment configuration
        run: npm run validate:env

      - name: Check database migrations
        run: npm run db:migrate:check

      - name: Generate deployment report
        run: npm run deployment:report

  # Quality Gate Decision
  quality-gate:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test-suite, performance-test, accessibility-test, api-contract-test, quality-metrics, deployment-readiness]
    if: always()
    steps:
      - name: Check quality gate status
        run: |
          echo "Quality Gate Status:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Test Suite: ${{ needs.test-suite.result }}"
          echo "Performance: ${{ needs.performance-test.result }}"
          echo "Accessibility: ${{ needs.accessibility-test.result }}"
          echo "API Contract: ${{ needs.api-contract-test.result }}"
          echo "Quality Metrics: ${{ needs.quality-metrics.result }}"
          echo "Deployment Readiness: ${{ needs.deployment-readiness.result }}"

      - name: Fail if any quality gate failed
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" || 
                "${{ needs.security-scan.result }}" != "success" || 
                "${{ needs.test-suite.result }}" != "success" || 
                "${{ needs.performance-test.result }}" != "success" || 
                "${{ needs.accessibility-test.result }}" != "success" || 
                "${{ needs.api-contract-test.result }}" != "success" || 
                "${{ needs.quality-metrics.result }}" != "success" || 
                "${{ needs.deployment-readiness.result }}" != "success" ]]; then
            echo "Quality gate failed - deployment blocked"
            exit 1
          else
            echo "All quality gates passed - deployment approved"
          fi
